1 、/**
 * @brief gpio按键，timer 回调函数，处理按键去抖，按下，短按，长按
 * 
 * @param pxTimer timer handle
 */
static void vtimer_gpio_callback(xTimerHandle pxTimer)
{
    //第一次按键按下时间
    static TickType_t first_press_time[GPIO_KEY_NUMBER] = {0};
    //按键释放时间
    static TickType_t freed_time[GPIO_KEY_NUMBER] = {0};
    static TickType_t long_time[GPIO_KEY_NUMBER] = {0};
    static uint8_t  init_flag = 1;
    static uint8_t vaild_key_number = 0;
    static int key_time[GPIO_KEY_NUMBER] = {0};
    static uint8_t key_index_pre[GPIO_KEY_NUMBER];
    sys_msg_key_data_t key_buff[GPIO_KEY_NUMBER]={MSG_KEY_STATUS_PRESS,KEY_NULL,0};
    sys_msg_key_data_t send_key_buff[ GPIO_KEY_NUMBER]={MSG_KEY_STATUS_PRESS,KEY_NULL,0};
    
    if(init_flag == 1)
    {
        init_flag = 0;
        memset(key_index_pre,KEY_NULL,sizeof(key_index_pre));
    }
    
    for(int i=0;i<GPIO_KEY_NUMBER;i++)
    {
        gpio_irq_unmask(gpio_key_list[i].gpio_group,gpio_key_list[i].pin_num);
    }
    
    ci_key_gpio_deal(key_buff);
    for(int i=0;i<GPIO_KEY_NUMBER;i++)
    {
        if(key_buff[i].key_index != KEY_NULL)
        {
            if(key_buff[i].key_index == key_index_pre[i])
            {
                key_time[i]++;
            }
            else
            {
                key_index_pre[i] = key_buff[i].key_index;
                key_time[i] = 1;
            }
            
            if(key_time[i] == KEY_SHORTPRESS_TIMER)//消抖处理
            {
                send_key_buff[i].key_index = key_buff[i].key_index;
                send_key_buff[i].key_status = MSG_KEY_STATUS_PRESS;
                send_key_buff[i].key_time_ms = 0;
                first_press_time[i] = xTaskGetTickCount();
                vaild_key_number++;
            }
            else if(key_time[i]%KEY_LONGPRESS_TIMER == 0)
            {
                send_key_buff[i].key_index = key_buff[i].key_index;
                send_key_buff[i].key_status = MSG_KEY_STATUS_PRESS_LONG;
                long_time[i] = xTaskGetTickCount();
                send_key_buff[i].key_time_ms = (long_time[i] - first_press_time[i])*(1000/configTICK_RATE_HZ);
            }
        }
        else
        {
            if(key_index_pre[i] != KEY_NULL)
            { 
                
                freed_time[i] = xTaskGetTickCount();
                send_key_buff[i].key_index = key_index_pre[i];
                send_key_buff[i].key_status = MSG_KEY_STATUS_RELEASE;
                send_key_buff[i].key_time_ms = (freed_time[i] - first_press_time[i])*(1000/configTICK_RATE_HZ);
                
                key_time[i] = 0;
                key_index_pre[i] = KEY_NULL;
                vaild_key_number--;
                if(vaild_key_number == 0)
                {
                    xTimerStop(xTimer_gpio_key,0);
                }
                freed_time[i] = 0;
                first_press_time[i]= 0;
                long_time[i]  = 0;
            }
        }
        gpio_irq_unmask(gpio_key_list[i].gpio_group,gpio_key_list[i].pin_num);
        if(send_key_buff[i].key_index != KEY_NULL)
        {
            sys_msg_t send_msg;
            send_msg.msg_type = SYS_MSG_TYPE_KEY;
            memcpy(&send_msg.msg_data,&send_key_buff[i],sizeof(sys_msg_key_data_t));
            send_msg_to_sys_task(&send_msg,0);
        }

    }
}
void ci_key_gpio_deal(sys_msg_key_data_t* key_buff)
{
    sys_msg_key_data_t *key_buff_temp = key_buff;

    //低电平按键有效
    for(int i = 0;i<GPIO_KEY_NUMBER;i++)
    {

        if(gpio_get_input_level(gpio_key_list[i].gpio_group,gpio_key_list[i].pin_num)==GPIO_KEY_EFFECTIVE)
        {
            key_buff_temp[i].key_index = gpio_key_list[i].key_index;
        }
        else
        {
            key_buff_temp[i].key_index = KEY_NULL;
        }
    }
}
2\https://blog.csdn.net/xh870189248/article/details/80524714
