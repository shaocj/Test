
强本地弱云段处理方案
1、	离线和在线混合，一般做法是，本地识别和上传云端同时处理，本地识别出结果，就按照本地的识别处理，如果本地没有识别出，按照云端处理。按照置信度来判断。离线速度比在线至少快200ms,比较容易分辨出来。本地识别到结果如果置信度达到阈值，就直接按照本地处理，云端过来的指令不理会。
如果本地的小于阈值（阈值的设置根据什么来设置？），就直接使用云端的进行处理
云端（不会发送阈值）处理不会给一个阈值，就拿打开风扇来说，百度（百度分为设备开发和技能开发）的平台上需要做一个技能，然后这个技能就可以发送播报音的URL和控制CMD过来（由云端SDK接口处理，放在wifi端），本地的SDK有一个对应的接口，专门处理打开风扇的功能。如果识别不到就会发送识别不到相关的播报音下来（这种情况不需要本地来处理）
①目前传输机制如下，按照置信度来判断，本地设置一个阈值，如果本地识别出大于此阈值就以本地为主，此时远端过来的指令不进行处理；
 
②如果本地识别小于阈值并且云端识别到了，就以云端处理为主，以打开风扇或者播放一首小苹果为例，此时云端需要一个技能，然后这个技能就可以发送播报音的URL和控制CMD过来（由云端SDK接口处理），本地也会有一个对应的SDK的接口来与云端交互；
③如果本地识别小于阈值且云端又未识别到，那么云端就会识别不到的相关播报音下来。此机制描述不知道是否正确？
答：这个机制主要是一个本地和云端协作、仲裁的过程。描述中的这个机制是强本地弱云端的方案，使用CI1006，由于本地识别速度很快，建议使用这种机制。另外
如果接的是百度的服务，需要确认下所有的云端控制指令是否都能实现，这个需要与服务提供商确认。腾讯的机制不了解。

2、	本地sdk和云端SDK具体如何传输的？
答：按照本地主控为CI1006，接DuerOS来说，本地管理所有的控制，逻辑判断（具体怎么个逻辑判断）。WIFI模块上运行DuerOS。DuerOS本地SDK与云端交互使用http协议。DuerOS云端维护一个状态机，本地的状态（主要是播放MP3,TTS等）都是根据云端的状态改变的。就是云端控制本地，本地相当于DuerOS的一个传感器。控制和播放等都有专门的接口。例如：唤醒后，说“播放小苹果”，该音频数据被speex算法压缩后（wifi端做的），通过http协议实时传送到百度云端，百度云端解析出该语义后，就会下发一个URL。在专用的audio_play接口里播放该URL，即实现了播放在线歌曲《小苹果》。
一种理解：
Usecase： 
说“播放小苹果”，CI1006侧，根据uart协议打包成cmd_type 为0x0832的音频包，再经过传输层封包，然后通过uart传输到wifi，wifi侧收到数据解包发现时0x0832的包知道是C1006发过来的,, wifi将该音频数据被speex算法压缩后通过http协议发送音频流到云端服务器，云端服务器解析出该语句，下发音乐url和语音播报URL（有两个接口各自处理语音播报的和音乐播报的）及CMD，wifi端dureos sdk获取音乐及播报的音频流，通过封包成0x0834的数据包通过uart发送到C1006端，C1006 sdk进行解包通过cmd_type发现时播放音乐（wifi那端也要定义c1006端定义的cmd?（是的）），那么久进行播放。
大体流程：
如果我有打开空调，关闭空调，升高一度，降低一度四个命令词，那我在cmd_type定义0✘0831，表明是一个音频包由1006到wifi，定义0✘0832表明是控制空调打开的音频包由wifi到1006，定义0✘0833表明是控制空调关闭的音频包由wifi到1006，定义0✘0834表明是控制空调身高一度的音频包由wifi到1006，定义0✘0835表明是控制空调降低一度的音频包由wifi到1006，定义0✘0836表明是播放音乐音频包由wifi到1006，
        这样用户说打开空调，本地识别的同时将打开空调的音频包打包成0✘0831音频包发送到云端，如果本地识别大于阈值就按本地识别的另一套协议格式控制，如果本地识别低于阈值，那么云端理解后下发控制空调打开的命令及语音播报的url,wifi将这个音频包打包成0✘0832发往1006，1006解包发现是0✘0832打开空调的命令，播报此语音并打开空调。
       用户如果说播放音乐，1006将此音频打包成0✘0831的音频包发往wifi，wifi解包发现是0✘0831表明由1006来的，然后发往云端，云端识别理解后，下发歌曲的url和语音播报的url，wifi将两个音频打包成两个 0✘0836，分别由两个接口发往1006,1006解包发现是0✘0836，就播报语音并播放音乐。


3、	如何查询设备是否已经准备好了是否可以通讯？
答：就MTK的WIFI模块来说，连接WIFI成功后，会触发一个回调函数，该函数里，即可做相关的WIFI链接成功确认。DuerOS连接成功后，也有对应的回调函数，在该函数里可以确认连接DuerOS成功。我们现在做的是直接用CI1006控制MTK WIFI模块的复位，复位后两边默认就连接起来了。（也可以有个反馈，连接成功发个cmd就可以了。）后面没有处理各种连接状态。
4、	用于升级固件等用于后面版本的查询是从应用协议里version字节来体现？
答：DuerOS支持OTA功能，不过后台只
信息支持2MB的文件，升级文件超大小的问题，需要和百度谈。各种版本需要按照百度的规范来。
OTA是英文Over-The-Air的简称。OTA自动配置是通过短信(SMS)作为载体来实现的，OTA规范用来将手机参数按某种特定的格式进行包装，进而形成特定的短信息发送到用户手机。如果用户的用户手机支持OTA规范的话，在用户确认后手机就会将这种特殊的短信息(配置信息)转变为手机参数。
5、	1006为主的话，主从交互的规范是什么？比如发起、应答、丢包等处理机制？
答：UART传输就是按照前面定义的协议来做的，通过添加CMD和PAYLOAD来解析。由于控制CI1006和电控板之间有另外一套协议来处理，控制成功失败都会有状态返回；音频是实时数据，如果出错重新发包也不行，所以没有做重发机制和应答机制，接收到的包，如果校验不过，就会丢弃。
传输层的校验值在包尾的0xa4前1字节。Wifi打包按照传输协议来就可以了，，丢包后不做任何修改。
6、  每条命令是如何指明发起方，期望的答复是什么的？
答：每条指令由哪方发起都是直接按照CMD定义的，比如0x0831,由CI1006发给MTK，表明是一个音频包。0x0832由MTK发送到CI1006，表明是一个控制空调打开。这个都是自定义的。每条指令的值都不同，不会冲突就可以。

1、	本地识别大于阈值，以本地为主，忽略云端的识别
2、	本地识别小于阈值，以云端识别为主
3、	本地识别小于阈值，云端又未识别，云端下发对应语音播放
4、	本地识别小于阈值，且上传云端失败，不会有任何反应
5、	播放歌曲如果本地识别大于阈值（前提是本地做了播放放歌曲命令识别，本地有歌曲），是否有本地识别大于阈值又播放云端下发的歌曲（感觉这样无意义）







