audioflinger and audiotrack
补充 http://thinks.me/2016/09/13/audio_qcom_offload/
http://thinks.me/2015/12/19/audioflinger_buffer/
http://thinks.me/2016/04/09/audio_a2dp/#more

  offload跟mixer线程的区别，其实主要是基本上没有mixer的处理，直接绕过audioflinger的采样率、format、采样精度、通道数等的转变，所以其实offload的逻辑是更简单的。
看到判断依据是audio_policy.conf中compressoffload的节点中的flag是否带有non_blocking，如果有还需要确认底层是否支持callback的场景，如果支持的话，则告诉hal层，我们这边的回调函
数是哪个，并且创造callback的线程来。这个线程在这个场景中至关重要，它会等到底层有空间的时候来唤醒offload线程去通知app来填充数据。
  AudioTrack已经创建出来了，那第二步就是执行它的play方法，最后才是写数据.
  AudioTrack创建结束就已经代表了你已经完成了对空间的申请了，并且在output thread中也有track的对象存在，只是如果没有执行play的话，那这个track是不属于active track，output thread在执行的过程中，并不会去看这个track的数据是否已经填充满了。
  获取output，这个output对应到AudioFlinger中的某个output thread，每个thread都会含有一个hal的output。通过这个output去获取hal层当前设置的samplingRate。。每一个output都对应到audio_policy.conf中的一个port节点。
  这个samplingRate的值基本上就是第一个打开这个output的时候设置的，除非后面有通过setparameter进行重新设置，否则这个值就是这样了。它也必须跟audio_policy.conf中一致的。
  我们已经有output了，并且获取到了samplingRate了，那接下来就是framecount和latency，而这两个值都是hal层的数据。并不是我们open output的时候传递进去的，不过获取的逻辑基本上跟上面获取samplingRate是一致的。
  fast跟direct不能共存。fast在mixer线程，direct在direct线程.
  如果是含有direct flag，并且是线性pcm的话，我们需要根据fomat和channelCount来计算帧大小.否则，如果不是线性pcm的话，那帧大小设置为1个字节，8位。
  AudioPolicyManager在进行初始化的时候会去解析audio_policy.conf文件，会创建Flag为primary的output，在open的过程中会将audio_policy.conf中关于该节点的数据传递给底层streamout对象，每个线程都有自己的streamout对象：
    status_t status = hwDevHal->open_output_stream(hwDevHal,
                                               *output,
                                               devices,
                                               flags,
                                               config,
                                               &outStream,
                                               address.string());
